# NOTE: Set the values on the production site; including
# 'user' (except for the simulator) and some env vars.

services:
  web:
    extends:
      file: compose.base.yaml
      service: web
    build:
      args:
        PRODUCTION_UID: ${PRODUCTION_UID}
        PRODUCTION_GID: ${PRODUCTION_GID}
    volumes:
      # The global config
      - ./config_prod.py:/main/config.py
      
      # The redis unix socket directory
      - redis_sock_dir:/var/run/redis/

      # The logs directory
      - /var/log/codefights/:/var/log/codefights/

      # The media root
      - uploaded_files:/srv/codefights/
    user: app
    
  nginx:
    extends:
      file: compose.base.yaml
      service: nginx
    build:
      args:
        PRODUCTION_UID: ${PRODUCTION_UID}
        PRODUCTION_GID: ${PRODUCTION_GID}
    volumes:
      - uploaded_files:/srv/codefights/
      - /var/log/codefights/nginx/:/var/log/nginx/
      
      # Replace with the directory holding the certificates.
      - ...:/etc/certs/

      # Replace with the acme challenge directory.
      - ...:/etc/acme/
    environment:
      # To be populated...
      SERVER_MAIN_DOMAIN:
      SERVER_FILES_DOMAIN:
      MEDIA_ROOT:
      STATIC_ROOT:
      MEDIA_URL:
      STATIC_URL:
      SSL_CERT_PATH:
      SSL_KEY_PATH:
      ACME_CHALLENGE_ROOT:
    user: app
  
  # For WebSockets. Later ...
  # async_web:
  #   ...

  redis:
    extends:
      file: compose.base.yaml
      service: redis
    build:
      args:
        PRODUCTION_UID: ${PRODUCTION_UID}
        PRODUCTION_GID: ${PRODUCTION_GID}
    volumes:
      # We mount the directory rather than the socket file itself, as redis
      # will complain if the file is already created.
      - redis_sock_dir:/var/run/redis/

      # The logs directory
      - /var/log/codefights/redis/:/var/log/redis/
    user: app
    

  db:
    extends:
      file: compose.base.yaml
      service: db
    volumes:
      - postgres_data:/var/lib/postgresql/data


  simulator:
    extends:
      file: compose.base.yaml
      service: simulator
    volumes:
      # The global config
      - ./config_prod.py:/main/config.py
        
      # The redis unix socket directory
      - redis_sock_dir:/var/run/redis/

      # The logs directory
      - /var/log/codefights:/var/log/codefights/

      # The media root
      - uploaded_files:/srv/codefights/

  
  result_processor:
    extends:
      file: compose.base.yaml
      service: result_processor
    build:
      args:
        PRODUCTION_UID: ${PRODUCTION_UID}
        PRODUCTION_GID: ${PRODUCTION_GID}
    volumes:
      # The global config
      - ./config_prod.py:/main/config.py
      
      # The redis unix socket directory
      - redis_sock_dir:/var/run/redis/

      # The logs directory
      - /var/log/codefights/:/var/log/codefights/

      # The media root
      - uploaded_files:/srv/codefights/
    user: app


volumes:
  # tmpfs volumes cannot be shared between containers,
  # so we use a normal docker volume. Apparently, it
  # must be external; otherwise it will mount as root
  # instead of copying what's in the service 'redis',
  # which is set to have the correct owner (user 'app').
  # I'm not sure why this happens ... search later.
  redis_sock_dir:
    external: true

  postgres_data:
    external: true
  
  uploaded_files:
    external: true
